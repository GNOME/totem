AC_PREREQ(2.52)
AC_INIT(totem, 1.0.3, http://bugzilla.gnome.org/enter_bug.cgi?product=totem)
AC_CONFIG_SRCDIR(src/totem.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(config.h)

AC_DEFINE(PACKAGE, AC_PACKAGE_NAME, [package name])
AC_DEFINE(VERSION, AC_PACKAGE_VERSION, [package version])
AC_DEFINE(GETTEXT_PACKAGE, "AC_PACKAGE_NAME", [foo])
GETTEXT_PACKAGE=AC_PACKAGE_NAME
AC_SUBST(GETTEXT_PACKAGE)
AC_SUBST(VERSION)

AC_PROG_CXX
AC_PROG_LIBTOOL()
AC_PROG_INTLTOOL([0.20])

# Before making a release, the PLPARSER_LT_VERSION string should be modified.
# The string is of the form C:R:A.
# - If interfaces have been changed or added, but binary compatibility has
#   been preserved, change to C+1:0:A+1
# - If binary compatibility has been broken (eg removed or changed interfaces)
#   change to C+1:0:0
# - If the interface is the same as the previous version, change to C:R+1:A
PLPARSER_LT_VERSION=0:0:0
AC_SUBST(PLPARSER_LT_VERSION)


AC_ARG_ENABLE(nvtv, AC_HELP_STRING([--enable-nvtv],[Enable support for TV-output with nvtv]), enable_nvtv="$enableval", enable_nvtv=yes)

if test x$enable_nvtv = xyes; then
PKG_CHECK_MODULES(NVTV, nvtvsimple >= 0.4.5, found_nvtv=1,found_nvtv=0)
AC_SUBST(NVTV_CFLAGS)
AC_SUBST(NVTV_LIBS)
	if test $found_nvtv -eq 1 ; then
		AC_DEFINE(HAVE_NVTV,1,[Define to 1 if nvtv is available and used.])
	fi
fi

dnl xine or gst ?

dnl the two versions here implicate the gstreamer core and gst-plugins
dnl release versions. We want core newer than 0.8.6 (either cvs or a next
dnl prerelease; 0.8.7 is preferred) and gst-plugins newer than 0.8.4
dnl (either CVS or a prerelease; 0.8.5 is preferred).
GST_REQS=0.8.6.1
GSTPLUG_REQS=0.8.4.1
XINE_REQS=1.0.0

AC_ARG_ENABLE(gstreamer,
	AC_HELP_STRING([--enable-gstreamer],[use GStreamer instead of xine for the backend]),
	[case "${enableval}" in
	yes) ENABLE_GST=yes ;;
        no)  ENABLE_GST=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-gstreamer) ;;
	esac],
	[ENABLE_GST=no]) dnl Default value

HAVE_XINE=no
AC_MSG_CHECKING(for backend libraries)

if test x$ENABLE_GST = xno; then
	MM="libxine >= $XINE_REQS gconf-2.0"

	SAVE_CFLAGS="$CFLAGS"
	SAVE_LIBS="$LIBS"
	AC_TRY_COMPILE([
		#include <xine.h>
		],[
		int arg = 0, foo;
		foo = XINE_MSG_AUDIO_OUT_UNAVAILABLE;
		],HAVE_XINE=yes,HAVE_XINE=no)
	CFLAGS="$SAVE_CFLAGS"
	LIBS="$SAVE_LIBS"

	if test x$HAVE_XINE = xyes; then
		AC_MSG_RESULT(xine-lib)
	fi
fi

if test x$HAVE_XINE = xno; then
	GST_MAJORMINOR=0.8
	PKG_CHECK_MODULES(GST, \
			gstreamer-$GST_MAJORMINOR >= $GST_REQS \
			gstreamer-gconf-$GST_MAJORMINOR >= $GSTPLUG_REQS \
			gstreamer-interfaces-$GST_MAJORMINOR >= $GSTPLUG_REQS,
			HAVE_GSTREAMER=yes, HAVE_GSTREAMER=no)
	MM="gstreamer-$GST_MAJORMINOR >= $GST_REQS gstreamer-gconf-$GST_MAJORMINOR >= $GSTPLUG_REQS gstreamer-interfaces-$GST_MAJORMINOR >= $GSTPLUG_REQS"

dnl Give error and exit if we don't have gstreamer
	if test "x$HAVE_GSTREAMER" = "xno"; then
		AC_MSG_ERROR(you need the GStreamer or the xine-lib development packages installed)
	fi

	AC_MSG_RESULT(GStreamer)
fi

AM_CONDITIONAL(TOTEM_GST, test x$HAVE_GSTREAMER = "xyes")

AC_ARG_ENABLE(vanity,
	AC_HELP_STRING([--enable-vanity],[do not compile and install vanity]),
	[case "${enableval}" in
	yes) ENABLE_VANITY=yes ;;
	no) ENABLE_VANITY=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-vanity) ;;
	esac],
	[ENABLE_VANITY=no]) dnl Default value

AC_MSG_CHECKING(for Linux)
case `uname` in
        *Linux*)
	AC_MSG_RESULT(yes)
	IS_LINUX="yes"
	;;
	*)
	AC_MSG_RESULT(no)
        IS_LINUX="no"
	;;
esac

if test x$ENABLE_VANITY = "xyes" -a x$IS_LINUX = "xyes"; then
	COMPILE_VANITY=yes
else
	COMPILE_VANITY=no
fi

AM_CONDITIONAL(TOTEM_VANITY, test x$COMPILE_VANITY = "xyes")
AC_MSG_CHECKING(whether to compile vanity)
AC_MSG_RESULT($COMPILE_VANITY);

dnl Check for GTK+ only build
AC_ARG_ENABLE(gtk,
	AC_HELP_STRING([--enable-gtk],[compile a gtk+ only version]),
	[case "${enableval}" in
	yes) ENABLE_GTK=yes ;;
	no) ENABLE_GTK=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-gtk) ;;
	esac],
	[ENABLE_GTK=no]) dnl Default value

dnl Seems that the order matters because libtool blows
dnl Also check if we're going to be using GTK+ only
if test x$ENABLE_GTK = "xno" ; then
	PKG_CHECK_MODULES(EXTRA_GNOME, glib-2.0 >= 2.6.3 gtk+-2.0 >= 2.5.6 libgnomeui-2.0 >= 2.3.3 libglade-2.0 gnome-vfs-2.0 >= 2.1.6 gnome-vfs-module-2.0 >= 2.1.6 gnome-desktop-2.0 >= 2.1.5 $MM)
	HAVE_GNOME=yes
else
	PKG_CHECK_MODULES(EXTRA_GNOME, glib-2.0 >= 2.6.3 gtk+-2.0 >= 2.5.6 libglade-2.0 gnome-vfs-2.0 >= 2.1.6 gnome-vfs-module-2.0 >= 2.1.6 libnautilus-burn >= 2.9.0 $MM)
	AC_DEFINE(USE_STABLE_LIBGNOMEUI, 1, [defined if we don't have GNOME])
	AC_DEFINE(HAVE_GTK_ONLY, 1, [defined if GNOME isn't used])
	HAVE_GNOME=no
fi
PKG_CHECK_MODULES(LIBNCB, libnautilus-burn >= 2.9.0, [
    HAVE_NCB=yes && AC_DEFINE(HAVE_NCB, 1, [defined if we use libnautilus-burn])
    ],HAVE_NCB=no)
EXTRA_GNOME_LIBS="$EXTRA_GNOME_LIBS $LIBNCB_LIBS"
EXTRA_GNOME_CFLAGS="$EXTRA_GNOME_CFLAGS $LIBNCB_CFLAGS"

AM_CONDITIONAL(HAVE_GNOME, test x$HAVE_GNOME = "xyes")
EXTRA_GNOME_CFLAGS="$EXTRA_GNOME_CFLAGS"
EXTRA_GNOME_LIBS="$EXTRA_GNOME_LIBS"
AC_SUBST(EXTRA_GNOME_CFLAGS)
AC_SUBST(EXTRA_GNOME_LIBS)

PKG_CHECK_MODULES(GTK, gtk+-x11-2.0 $MM gthread-2.0)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

dnl Check for Mozilla plugin build
AC_ARG_ENABLE(mozilla,
	AC_HELP_STRING([--enable-mozilla],[compile the mozilla plugin]),
	[case "${enableval}" in
	yes) ENABLE_MOZILLA=yes ;;
	no) ENABLE_MOZILLA=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-mozilla) ;;
	esac],
	[ENABLE_MOZILLA=no]) dnl Default value

if test x$ENABLE_MOZILLA = "xyes" ; then
	PKG_CHECK_MODULES(MOZILLA, gtk+-x11-2.0 $MM gthread-2.0 mozilla-plugin gnome-vfs-2.0,
			[HAVE_MOZILLA=yes], [HAVE_MOZILLA=no])
fi

AC_SUBST(MOZILLA_CFLAGS)
AC_SUBST(MOZILLA_LIBS)
if test x$HAVE_MOZILLA = "xyes"; then
	AC_DEFINE(HAVE_MOZILLA, 1, [defined if you build the mozilla plugin])
fi
AM_CONDITIONAL(HAVE_MOZILLA, test x$HAVE_MOZILLA = "xyes")

dnl Check for Nautilus property page build
AC_ARG_ENABLE(nautilus,
	AC_HELP_STRING([--enable-nautilus],[compile the nautilus plugin]),
	[case "${enableval}" in
	yes) ENABLE_NAUTILUS=yes ;;
	no) ENABLE_NAUTILUS=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-nautilus) ;;
	esac],
	[ENABLE_NAUTILUS=yes]) dnl Default value

if test x$ENABLE_NAUTILUS = "xyes" ; then
	PKG_CHECK_MODULES(NAUTILUS, gtk+-x11-2.0 $MM gthread-2.0 libnautilus-extension,
			[HAVE_NAUTILUS=yes], [HAVE_NAUTILUS=no])
fi

AC_SUBST(NAUTILUS_CFLAGS)
AC_SUBST(NAUTILUS_LIBS)
if test x$HAVE_NAUTILUS = "xyes"; then
	AC_DEFINE(HAVE_NAUTILUS, 1, [defined if you build the nautilus plugin])
fi
AM_CONDITIONAL(HAVE_NAUTILUS, test x$HAVE_NAUTILUS = "xyes")


dnl LIRC

AC_ARG_ENABLE(lirc,
	AC_HELP_STRING([--enable-lirc],[enable lirc support]),
	[case "${enableval}" in
	yes) ENABLE_LIRC=yes ;;
	no)  ENABLE_LIRC=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-lirc) ;;
	esac],
        [ENABLE_LIRC=yes]) dnl Default value

if test x$ENABLE_LIRC = xyes ; then
AC_CHECK_HEADER(irman.h,,)
REMOTE_LIBS=""
AC_CHECK_LIB(lirc_client, lirc_init, [
	AC_CHECK_HEADER(lirc/lirc_client.h, [
	REMOTE_LIBS="-llirc_client"
	AC_DEFINE(HAVE_REMOTE, 1, [defined if you have lirc library])
	])
])
fi

AC_SUBST(REMOTE_LIBS)

AC_PATH_X

if test x"$x_includes" != x"NONE" && test -n "$x_includes" ; then
	X_INCLUDES=-I`echo $x_includes | sed -e "s/:/ -I/g"`
fi
if test x"$x_libraries" != x"NONE" && test -n "$x_libraries" ; then
	X_LIBRARIES=-L`echo $x_libraries | sed -e "s/:/ -L/g"`
fi
CFLAGS="$X_INCLUDES $CFLAGS"
LIBS="$X_LIBRARIES $LIBS"

XTEST_LIBS=""
AC_CHECK_LIB(Xtst, XTestFakeKeyEvent,
		XTEST_LIBS="-lX11 -lXtst $X_LIBRARIES"
		AC_DEFINE(HAVE_XTEST, 1, [defined if you have XTest library]),
		,
		$X_LIBRARIES)
AC_SUBST(XTEST_LIBS)

have_xvidmode=no
AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryExtension,
	XVIDMODE_LIBS="-lXxf86vm"
	have_xvidmode=yes,,
	$X_LIBRARIES -lXext)

have_randr=no
AC_CHECK_LIB(Xrandr, XRRUpdateConfiguration,
	[AC_CHECK_HEADER(X11/extensions/Xrandr.h,
	have_randr=yes
	RANDR_LIBS="-lX11 -lXrandr -lXrender",
	:, [#include <X11/Xlib.h>])], : ,
	$X_LIBRARIES -lXrandr -lXrender)

XVIDMODE_LIBS="$XVIDMODE_LIBS $RANDR_LIBS"
AC_SUBST(XVIDMODE_LIBS)
AM_CONDITIONAL(HAVE_XVIDMODE, [test $have_randr = yes -a $have_xvidmode = yes])
if test $have_randr = yes -a $have_xvidmode = yes; then
	AC_DEFINE(HAVE_XVIDMODE,, [Define this if you have the XVidMode and XRandR extension installed])
fi

dnl Explicitely link against libX11 to avoid problems with crappy linkers
X_LIBS="$X_LIBRARIES -lX11"
AC_SUBST(X_LIBS)

dnl Multimedia keys
have_xfree=no
AC_COMPILE_IFELSE([
	#include <X11/XF86keysym.h>
	int main(int argc,char **argv) {
	return 0;
	}
	],
	have_xfree=yes
)
AC_MSG_CHECKING(for X11 XFree86 headers)
AC_MSG_RESULT($have_xfree)
if test x"$have_xfree" = "xyes" ; then
	AC_DEFINE(HAVE_XFREE, 1, [defined if you have X11/XF86keysym.h])
fi

AC_MSG_CHECKING(for broken old architecture)
if test "`uname -m`x" = "i686x" ; then
       AC_MSG_RESULT(h0rk3d)
else
       AC_MSG_RESULT(n334)
fi
AC_MSG_CHECKING(for broken user)
if test "`whoami`x" = "hadessx" ; then
       AC_MSG_RESULT(h0rk3d)
else
       AC_MSG_RESULT(n334)
fi

AC_MSG_CHECKING(for bad taste in TV series)
if test "`whoami`x" = "mickex" ; then
       AC_MSG_RESULT(oh my god yes)
else
       AC_MSG_RESULT(pheew nope)
fi


_system_is_x86="no"
AC_CHECK_HEADER( asm/vm86.h, _system_is_x86="yes" )
if `test "x$_system_is_x86" = "xyes" && test "x$CURL_CONFIG" != "xno"` ; then
	HAVE_X86=1
	AC_DEFINE(HAVE_X86, 1, [defined on x86 machines])
else
	HAVE_X86=0
fi
AM_CONDITIONAL(HAVE_X86, `test "x$_system_is_x86" = "xyes" && test "x$CURL_CONFIG" != "xno"`)

AC_PATH_PROG(GCONFTOOL, gconftool-2)
AM_GCONF_SOURCE_2

dnl Check for packages for building libtotem-plparser.la
PKG_CHECK_MODULES(TOTEM_PLPARSER, [gtk+-2.0 libxml-2.0 gnome-vfs-2.0
                                   gnome-vfs-module-2.0])


dnl debug
AC_ARG_ENABLE(debug,
		AC_HELP_STRING([--disable-debug],[disables compilation of debugging messages]),
	[case "${enableval}" in
	yes) ENABLE_DEBUG=yes ;;
	no)  ENABLE_DEBUG=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --disable-debug) ;;
	esac],
[ENABLE_DEBUG=no]) dnl Default value
if test x$ENABLE_DEBUG = xyes; then
	AC_DEFINE(TOTEM_DEBUG, 1, [Define if DEBUG statements should be compiled in])
fi

if test "$GCC" = "yes" ; then
	CFLAGS="\
	-Wall \
	-Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
	-Wnested-externs -Wpointer-arith \
	-Wcast-align -Wsign-compare \
	-fno-strict-aliasing \
	$CFLAGS"
fi

dnl Add the languages which your application supports here.
ALL_LINGUAS="am ar az be bg bn ca cs cy da de el en_CA en_GB es et eu fi fr ga gl gu he hi hr hu id is it ja ko lt lv mk ml ms nb nl no pa pl pt pt_BR ro ru rw sk sq sr sr@Latn sv th tr uk vi wa xh zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT

AC_OUTPUT([
Makefile
totem.spec
totem-plparser.pc
src/Makefile
data/Makefile
data/totem.desktop.in.in
data/vanity.desktop.in
po/Makefile.in
help/Makefile
help/C/Makefile
help/de/Makefile
help/es/Makefile
help/ru/Makefile
])

echo
if test x$HAVE_XINE = xno ; then
	echo "Using the GStreamer backend"
else
	echo "Using the xine backend"
fi
echo
