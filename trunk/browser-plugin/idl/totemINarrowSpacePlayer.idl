/* Totem Mozilla plugin
 *
 * Copyright (C) <2004> Bastien Nocera <hadess@hadess.net>
 * Copyright (C) <2002> David A. Schleef <ds@schleef.org>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#include "nsISupports.idl"

[scriptable, uuid(e2f9b616-3ea9-4487-b8b2-561892009f95)]

/* Original documentation at:
 * http://developer.apple.com/documentation/QuickTime/REF/QT41_HTML/QT41WhatsNew-72.html */

interface totemINarrowSpacePlayer : nsISupports {
  /* Movie Commands */
  void Play ();
  void Stop ();
  void Rewind ();
  void Step (in long count);
  void ShowDefaultView ();
  void GoPreviousNode ();

  /* Movie Properties */
  void SetRate (in float rate);
  float GetRate ();

  void SetTime (in unsigned long time);
  unsigned long GetTime ();

  void SetVolume (in unsigned long volume);
  unsigned long GetVolume ();

  void SetMovieName (in AUTF8String movieName);
  AUTF8String GetMovieName ();

  void SetMovieID (in unsigned long movieID);
  unsigned long GetMovieID ();

  void SetStartTime (in unsigned long time);
  unsigned long GetStartTime ();

  void SetEndTime (in unsigned long time);
  unsigned long GetEndTime ();

  void SetBgColor (in ACString color);
  ACString GetBgColor ();

  void SetIsLooping (in boolean loop);
  boolean GetIsLooping ();

  void SetLoopIsPalindrome (in boolean loop);
  boolean GetLoopIsPalindrome ();

  boolean GetMute ();
  void SetMute (in boolean mute);

  void SetPlayEveryFrame (in boolean playAll);
  boolean GetPlayEveryFrame ();

  void SetAutoPlay (in boolean autoPlay);
  boolean GetAutoPlay ();

  void SetControllerVisible (in boolean visible);
  boolean GetControllerVisible ();

  void SetHREF (in AUTF8String url);
  AUTF8String GetHREF ();

  void SetTarget (in AUTF8String target);
  AUTF8String GetTarget ();

  void SetQTNEXTUrl (in unsigned long index, in AUTF8String url);
  AUTF8String GetQTNEXTUrl (in unsigned long index);

  void SetHotspotUrl (in unsigned long hotspotID, in AUTF8String url);
  AUTF8String GetHotspotUrl (in unsigned long hotspotID);

  void SetHotspotTarget (in unsigned long hotspotID, in AUTF8String target);
  AUTF8String GetHotspotTarget (in unsigned long hotspotID);

  void SetURL (in AUTF8String url);
  AUTF8String GetURL ();

  void SetKioskMode (in boolean kioskMode);
  boolean GetKioskMode ();

  unsigned long GetDuration ();
  unsigned long GetMaxTimeLoaded ();
  unsigned long GetTimeScale ();
  unsigned long GetMovieSize ();
  unsigned long GetMaxBytesLoaded ();

  void SetMatrix (in ACString matrix);
  ACString GetMatrix ();
  
  void SetRectangle (in ACString rect);
  ACString GetRectangle ();

  void SetLanguage (in ACString language);
  ACString GetLanguage ();

  ACString GetMIMEType ();
  AUTF8String GetUserData (in ACString type);

  /* Track Properties */
  unsigned long GetTrackCount ();
  AUTF8String GetTrackName (in unsigned long index);
  ACString GetTrackType (in unsigned long index);
  boolean GetTrackEnabled (in unsigned long index);
  void SetTrackEnabled (in unsigned long index, in boolean enabled);

  /* Sprite Track Properties */
  void SetSpriteTrackVariable (in unsigned long trackIndex,
			       in unsigned long variableIndex,
			       in ACString value);
  ACString GetSpriteTrackVariable (in unsigned long trackIndex,
				   in unsigned long variableIndex);

  /* QuickTime VR Movie Properties */
  boolean GetIsVRMovie ();

  void SetPanAngle (in float angle);
  float GetPanAngle ();

  void SetTiltAngle (in float angle);
  float GetTiltAngle ();

  void SetFieldOfView (in float fov);
  float GetFieldOfView ();

  unsigned long GetNodeCount ();
  unsigned long GetNodeID ();
  void SetNodeID (in unsigned long id);

  /* Plugin Properties */
  ACString GetPluginVersion ();
  ACString GetPluginStatus ();

  boolean GetResetPropertiesOnReload ();
  void SetResetPropertiesOnReload (in boolean reset);

  /* QuickTime Properties */
  ACString GetQuickTimeVersion ();
  ACString GetQuickTimeLanguage ();
  unsigned long GetQuickTimeConnectionSpeed ();
  boolean GetIsQuickTimeRegistered ();
  ACString GetComponentVersion (in ACString type,
				in ACString subType,
				in ACString manufacturer);
};
